// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cumhaz
NumericVector cumhaz(NumericVector Time, NumericVector lambda, NumericVector death_point);
RcppExport SEXP _FASTcure_cumhaz(SEXP TimeSEXP, SEXP lambdaSEXP, SEXP death_pointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type death_point(death_pointSEXP);
    rcpp_result_gen = Rcpp::wrap(cumhaz(Time, lambda, death_point));
    return rcpp_result_gen;
END_RCPP
}
// haz_
NumericVector haz_(NumericVector Time, NumericVector event, NumericVector death_point, NumericVector wexpb);
RcppExport SEXP _FASTcure_haz_(SEXP TimeSEXP, SEXP eventSEXP, SEXP death_pointSEXP, SEXP wexpbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type event(eventSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type death_point(death_pointSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wexpb(wexpbSEXP);
    rcpp_result_gen = Rcpp::wrap(haz_(Time, event, death_point, wexpb));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FASTcure_cumhaz", (DL_FUNC) &_FASTcure_cumhaz, 3},
    {"_FASTcure_haz_", (DL_FUNC) &_FASTcure_haz_, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_FASTcure(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
